@using System.Diagnostics;
@using System.Xml.Linq;

@inject IServiceScopeFactory factory
@inherits ErrorBoundary
@inject IHostEnvironment host

@{
    base.BuildRenderTree(__builder);
}
@if (CurrentException != null)
{
    if (isDevelopment || showDetail)
    {
        <div class="c-error-develop">
            <div class="c-message">
                @errorMessage
            </div>
            <div class="c-file-detail row p-2">
                <div class="col-md-1">
                    <label>File name: </label>
                </div>
                <div class="col-md-4">
                    <span>@fileName</span>
                </div>
                <div class="col-md-2">
                    <label>Line number</label>
                </div>
                <div class="col-md-2">
                    <span>@fileLineNumber</span>
                </div>
                <div class="col-md-3 ">
                    <span @onclick="Recover" class="c-copy-clipboard">Recover</span>
                </div>
            </div>
            <div class="c-content">
                @((MarkupString)stackTraceMessage.Replace("at ", "<br>at "))
            </div>
        </div>
    }
    else
    {
        <div class="c-error-status">
            <div class="c-error-container">
                <span class="fa fa-exclamation-triangle"></span>
                @if (!string.IsNullOrEmpty(saveErrorMessage))
                {
                    <span class="c-title">@saveErrorMessage</span>
                }
                else
                {
                    <span class="c-title">An error has occurred</span>
                }
            </div>
            <div class="c-error-handling">
                <div class="c-error-recovery">
                    <span @onclick="Recover">Recover</span>
                </div>
                <div class="c-error-details">
                    @if (UserId == 1)
                    {
                        <span @onclick="ShowDetails">More details</span>
                    }
                    else
                    {

                        <span onclick="$.caspian.showMessage('In Implementation')">Take ticket</span>
                    }
                </div>
            </div>
        </div>
    }
}

@code
{
    string fileName;
    short? fileLineNumber;
    string errorMessage;
    string stackTraceMessage;
    bool isDevelopment;
    bool showDetail;
    string saveErrorMessage;

    protected override void OnInitialized()
    {
        isDevelopment = host.IsDevelopment();

        base.OnInitialized();
    }

    public new void Recover()
    {
        showDetail = false;
        saveErrorMessage = null;
        base.Recover();
    }

    void ShowDetails()
    {
        showDetail = true;
    }

    protected override async Task OnErrorAsync(Exception exception)
    {
        saveErrorMessage = null;
        while (exception.InnerException != null)
            exception = exception.InnerException;
        try
        {
            errorMessage = exception.Message;
            stackTraceMessage = exception.StackTrace;
            if (isDevelopment)
            {
                var frame = GetFrame(exception);
                if (frame != null)
                {
                    fileName = Path.GetFileName(frame.GetFileName());
                    fileLineNumber = (short)frame.GetFileLineNumber();
                }
            }
            else
                await SaveError(exception);
        }
        catch (Exception ex)
        {
            while (ex.InnerException != null)
                ex = ex.InnerException;
            saveErrorMessage = ex.Message;
            StateHasChanged();
        }
        await base.OnErrorAsync(exception);
    }

    StackFrame GetFrame(Exception exception)
    {
        var st = new StackTrace(exception, true);
        return st.GetFrames().FirstOrDefault(t => t.HasSource());
    }

    async Task SaveError(Exception exception)
    {
    }

    [Parameter]
    public int? UserId { get; set; }
}
